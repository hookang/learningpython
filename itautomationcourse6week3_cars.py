import os
import locale
import sys
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.barcharts import HorizontalBarChart
from reportlab.graphics.charts.piecharts import Pie


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    car_year_sales = {}  # To store the total sales for each car_year

    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price

        # Find the car model with the most sales
        if item["total_sales"] > max_sales["total_sales"]:
            max_sales = item

        # Update the total sales for each car_year
        car_year = item["car"]["car_year"]
        if car_year not in car_year_sales:
            car_year_sales[car_year] = 0
        car_year_sales[car_year] += item["total_sales"]

        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

    # Find the most popular car_year
    max_car_year = max(car_year_sales, key=car_year_sales.get)

    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(
            format_car(max_sales["car"]), max_sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(
            max_car_year, car_year_sales[max_car_year])
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def generate_report(filename, data):
    """Generates a PDF report containing the data."""
    title = "Sales Summary for last month"
    summary = "<br/>".join(process_data(data))
    table_data = cars_dict_to_table(data)

    # Sort the data by total sales (index 3 in the table_data)
    table_data.sort(key=lambda x: x[3], reverse=True)

    # Generate the PDF report and save it in /tmp folder
    pdf_path = "/tmp/cars.pdf"
    doc = SimpleDocTemplate(pdf_path, pagesize=letter)
    styles = getSampleStyleSheet()

    # Title section
    title_text = "<font size='14'>{}</font>".format(title)
    title_paragraph = Paragraph(title_text, styles['Title'])
    summary_paragraph = Paragraph(summary, styles['Normal'])

    # Table section
    table_style = [('GRID', (0, 0), (-1, -1), 1, colors.black)]
    table = Table(table_data, style=table_style)
    table_title = Paragraph("<b>Car Sales Data</b>", styles['Heading1'])

    # Pie chart section
    pie_chart = create_pie_chart(data)

    # Bar chart section
    bar_chart = create_bar_chart(data)

    # Add elements to the PDF document
    elements = [title_paragraph, Spacer(1, 12), summary_paragraph, Spacer(1, 12),
                table_title, table, Spacer(1, 36), pie_chart, Spacer(1, 36), bar_chart]

    doc.build(elements)

    return pdf_path


def create_pie_chart(data):
    """Creates a pie chart for the total sales of each car made."""
    car_sales = {}
    for item in data:
        car_make = item['car']['car_make']
        car_sales[car_make] = car_sales.get(car_make, 0) + item['total_sales']

    drawing = Drawing(width=400, height=300)
    pie = Pie()
    pie.x = 150
    pie.y = 150
    pie.width = 100
    pie.height = 100
    pie.data = list(car_sales.values())
    pie.labels = list(car_sales.keys())
    drawing.add(pie)

    return drawing


def create_bar_chart(data):
    """Creates a bar chart showing total sales for the top 10 best selling vehicles."""
    top_vehicles = sorted(data, key=lambda x: x['total_sales'], reverse=True)[:10]
    vehicle_names = [format_car(vehicle['car']) for vehicle in top_vehicles]
    total_revenues = [locale.atof(vehicle['price'].strip("$")) * vehicle['total_sales'] for vehicle in top_vehicles]

    drawing = Drawing(width=500, height=300)
    bar_chart = HorizontalBarChart()
    bar_chart.x = 50
    bar_chart.y = 50
    bar_chart.width = 400
    bar_chart.height = 200
    bar_chart.data = [total_revenues]
    bar_chart.categoryAxis.categoryNames = vehicle_names
    drawing.add(bar_chart)

    return drawing


if __name__ == "__main__":
    # Replace 'car_sales.json' with the actual JSON file containing car sales data
   
